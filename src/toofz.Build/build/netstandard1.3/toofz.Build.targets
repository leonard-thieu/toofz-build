<Project>
  <PropertyGroup>
    <TasksAssemblyFileName>toofz.Build.dll</TasksAssemblyFileName>
    <TasksAssemblyFilePath>$(BuildToolsPath)$(TasksAssemblyFileName)</TasksAssemblyFilePath>
  </PropertyGroup>

  <ItemGroup>
    <TasksAssemblyFile Include="$(TasksAssemblyFilePath)" Condition="Exists('$(TasksAssemblyFilePath)')" />
    <TasksAssemblyFile Include="$(TargetPath)" Condition="!Exists('$(TasksAssemblyFilePath)')" />
  </ItemGroup>

  <UsingTask AssemblyFile="@(TasksAssemblyFile)" TaskName="toofz.Build.OpenCover" />
  <UsingTask AssemblyFile="@(TasksAssemblyFile)" TaskName="toofz.Build.Codecov" />
  <UsingTask AssemblyFile="@(TasksAssemblyFile)" TaskName="toofz.Build.NuGetPush" />

  <Target Name="Coverage">
    <PropertyGroup>
      <VsTestArgs>$(TargetPath)</VsTestArgs>
      <VsTestWorkingDir>$(TargetDir)</VsTestWorkingDir>
      <OpenCoverFilter>+[$(TargetName.Replace(&quot;.Tests&quot;, &quot;&quot;))]* -[$(TargetName)]*</OpenCoverFilter>
      <CodeCoverageResultsPath>$(ProjectDir)$(IntermediateOutputPath)$(TargetName).results.xml</CodeCoverageResultsPath>
    </PropertyGroup>

    <OpenCover ToolPath="$(OpenCoverToolPath)"
               Register="true"
               Target="$(VsTestPath)"
               TargetArgs="$(VsTestArgs)"
               TargetWorkingDir="$(VsTestWorkingDir)"
               ReturnTargetCode="true"
               Filter="$(OpenCoverFilter)"
               ExcludeByAttribute="$(OpenCoverExcludeByAttribute)"
               Output="$(CodeCoverageResultsPath)"
               OldStyle="$(OpenCoverOldStyle)" />
  </Target>

  <Target Name="PublishCoverage">
    <PropertyGroup>
      <CodeCoverageResultsPath>$(ProjectDir)$(IntermediateOutputPath)$(TargetName).results.xml</CodeCoverageResultsPath>
    </PropertyGroup>

    <Codecov ToolPath="$(CodecovToolPath)"
             File="$(CodeCoverageResultsPath)" />
  </Target>

  <Target Name="PublishPackage" DependsOnTargets="Pack">
    <PropertyGroup>
      <!-- PackageOutputAbsolutePath is set by Pack. -->
      <PackagePath>$(PackageOutputAbsolutePath)$(PackageId).$(PackageVersion).nupkg</PackagePath>
    </PropertyGroup>

    <NuGetPush ToolPath="$(NuGetPushToolPath)"
               Package="$(PackagePath)"
               Source="$(PackageServer)"
               ApiKey="$(PackageServerApiKey)"
               SymbolSource="$(SymbolPackageServer)"
               SymbolApiKey="$(SymbolPackageServerApiKey)" />
  </Target>
</Project>